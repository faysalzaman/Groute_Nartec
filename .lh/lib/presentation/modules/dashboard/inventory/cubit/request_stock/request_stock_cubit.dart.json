{
    "sourceFile": "lib/presentation/modules/dashboard/inventory/cubit/request_stock/request_stock_cubit.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753945811225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753945816697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'package:flutter_bloc/flutter_bloc.dart';\n import 'package:groute_nartec/presentation/modules/dashboard/start_day/models/loading/product_on_pallet.dart';\n import 'package:groute_nartec/repositories/stock_on_van_repository.dart';\n-import 'package:groute_nartec/repositories/stock_request_repository.dart';\n \n part 'request_stock_state.dart';\n \n /// Manages the request van stock workflow including product scanning and item selection\n"
                }
            ],
            "date": 1753945811225,
            "name": "Commit-0",
            "content": "import 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:groute_nartec/presentation/modules/dashboard/start_day/models/loading/product_on_pallet.dart';\nimport 'package:groute_nartec/repositories/stock_on_van_repository.dart';\nimport 'package:groute_nartec/repositories/stock_request_repository.dart';\n\npart 'request_stock_state.dart';\n\n/// Manages the request van stock workflow including product scanning and item selection\nclass RequestStockCubit extends Cubit<RequestStockState> {\n  RequestStockCubit() : super(RequestStockInitial());\n\n  static RequestStockCubit get(context) => BlocProvider.of(context);\n\n  // ==================== STATE VARIABLES ====================\n\n  bool _byPallet = true;\n  bool _bySerial = false;\n  int quantityPicked = 0;\n\n  // ==================== COLLECTIONS ====================\n\n  final Map<String, List<ProductOnPallet>> _productOnPallets = {};\n  final Map<String, List<ProductOnPallet>> _productOnPalletsAdded = {};\n  final Map<String, Set<String>> _selectedProductsOnPallet = {};\n\n  // ==================== GETTERS ====================\n\n  bool get byPallet => _byPallet;\n  bool get bySerial => _bySerial;\n  Map<String, List<ProductOnPallet>> get productOnPallets => _productOnPallets;\n  Map<String, List<ProductOnPallet>> get productOnPalletsAdded =>\n      _productOnPalletsAdded;\n  Map<String, Set<String>> get selectedItems => _selectedProductsOnPallet;\n\n  int get totalItemsCount {\n    int count = 0;\n    _productOnPallets.forEach((_, items) {\n      count += items.length;\n    });\n    return count;\n  }\n\n  int get totalSelectedItemsCount {\n    int count = 0;\n    _selectedProductsOnPallet.forEach((_, items) {\n      count += items.length;\n    });\n    return count;\n  }\n\n  // ==================== INITIALIZATION ====================\n\n  void init() {\n    _byPallet = true;\n    _bySerial = false;\n    _productOnPallets.clear();\n    _selectedProductsOnPallet.clear();\n    _productOnPalletsAdded.clear();\n    quantityPicked = 0;\n    emit(RequestStockChangeScanType());\n  }\n\n  void setScanType(bool byPallet, bool bySerial) {\n    _byPallet = byPallet;\n    _bySerial = bySerial;\n    emit(RequestStockChangeScanType());\n  }\n\n  // ==================== PRODUCT SCANNING ====================\n\n  void scanBySerialOrPallet({String? palletCode, String? serialNo}) async {\n    if (state is RequestStockScanItemLoading) return;\n\n    // Input validation\n    if (palletCode != null && palletCode.isEmpty) {\n      emit(RequestStockScanItemError(message: 'Pallet code is required'));\n      return;\n    }\n    if (serialNo != null && serialNo.isEmpty) {\n      emit(RequestStockScanItemError(message: 'Serial number is required'));\n      return;\n    }\n\n    emit(RequestStockScanItemLoading());\n\n    try {\n      // Check for duplicate package scans\n      if (_productOnPallets.containsKey(serialNo ?? palletCode)) {\n        emit(\n          RequestStockScanItemError(\n            message:\n                '${serialNo != null ? \"Serial\" : \"Pallet ID\"} already scanned!',\n          ),\n        );\n        return;\n      }\n\n      // Check for duplicate serial numbers across all packages\n      for (var productList in _productOnPallets.values) {\n        if (productList.any((x) => x.serialNumber == serialNo)) {\n          emit(\n            RequestStockScanItemError(\n              message:\n                  '${serialNo != null ? \"Serial\" : \"Pallet ID\"} already scanned!',\n            ),\n          );\n          return;\n        }\n      }\n\n      final productOnPallets = await StockOnVanRepository.instance\n          .getByPalletOrSerial(palletCode: palletCode, serialNo: serialNo);\n\n      final key = serialNo ?? palletCode!;\n      if (!_productOnPallets.containsKey(key)) {\n        _productOnPallets[key] = [];\n      }\n      _productOnPallets[key]?.addAll(productOnPallets);\n\n      emit(RequestStockScanItemLoaded());\n    } catch (error) {\n      emit(RequestStockScanItemError(message: error.toString()));\n    }\n  }\n\n  // ==================== ITEM SELECTION ====================\n\n  void toggleItemSelection(String packageCode, String itemId) {\n    if (!_selectedProductsOnPallet.containsKey(packageCode)) {\n      _selectedProductsOnPallet[packageCode] = <String>{};\n    }\n\n    if (_selectedProductsOnPallet[packageCode]!.contains(itemId)) {\n      _selectedProductsOnPallet[packageCode]!.remove(itemId);\n      if (quantityPicked > 0) quantityPicked--;\n    } else {\n      _selectedProductsOnPallet[packageCode]!.add(itemId);\n      quantityPicked++;\n    }\n\n    emit(RequestStockSelectionChanged());\n  }\n\n  bool isItemSelected(String packageCode, String itemId) {\n    if (!_selectedProductsOnPallet.containsKey(packageCode)) {\n      return false;\n    }\n    return _selectedProductsOnPallet[packageCode]!.contains(itemId);\n  }\n\n  void clearSelectedItems() {\n    _selectedProductsOnPallet.clear();\n    quantityPicked = 0;\n    emit(RequestStockSelectionChanged());\n  }\n\n  void selectAllItems() {\n    clearSelectedItems();\n\n    int selectedCount = 0;\n\n    for (var entry in _productOnPallets.entries) {\n      String packageCode = entry.key;\n      List<ProductOnPallet> items = entry.value;\n\n      if (!_selectedProductsOnPallet.containsKey(packageCode)) {\n        _selectedProductsOnPallet[packageCode] = <String>{};\n      }\n\n      for (var item in items) {\n        final itemId = item.id ?? '${item.serialNumber}-${item.palletId}';\n        _selectedProductsOnPallet[packageCode]!.add(itemId);\n        selectedCount++;\n      }\n    }\n\n    quantityPicked = selectedCount;\n    emit(RequestStockSelectionChanged());\n  }\n\n  bool areAllItemsSelected() {\n    return totalItemsCount > 0 && totalSelectedItemsCount == totalItemsCount;\n  }\n\n  // ==================== ITEM MANAGEMENT ====================\n\n  void removeItem(String packageCode, ProductOnPallet item) {\n    final String itemId = item.id ?? '${item.serialNumber}-${item.palletId}';\n\n    // Deselect if currently selected\n    if (_selectedProductsOnPallet.containsKey(packageCode) &&\n        _selectedProductsOnPallet[packageCode]!.contains(itemId)) {\n      _selectedProductsOnPallet[packageCode]!.remove(itemId);\n      quantityPicked--;\n    }\n\n    // Remove from product list\n    if (_productOnPallets.containsKey(packageCode)) {\n      _productOnPallets[packageCode]!.removeWhere((palletItem) {\n        final currentItemId =\n            palletItem.id ??\n            '${palletItem.serialNumber}-${palletItem.palletId}';\n        return currentItemId == itemId;\n      });\n\n      // Remove empty package\n      if (_productOnPallets[packageCode]!.isEmpty) {\n        _productOnPallets.remove(packageCode);\n      }\n    }\n\n    emit(RequestStockItemRemoved());\n  }\n\n  // New method specifically for removing items from the request list\n  void removeItemFromRequestList(String packageCode, ProductOnPallet item) {\n    final String itemId = item.id ?? '${item.serialNumber}-${item.palletId}';\n\n    // Remove from added products list\n    if (_productOnPalletsAdded.containsKey(packageCode)) {\n      _productOnPalletsAdded[packageCode]!.removeWhere((palletItem) {\n        final currentItemId =\n            palletItem.id ??\n            '${palletItem.serialNumber}-${palletItem.palletId}';\n        return currentItemId == itemId;\n      });\n\n      // Remove empty package from added list\n      if (_productOnPalletsAdded[packageCode]!.isEmpty) {\n        _productOnPalletsAdded.remove(packageCode);\n      }\n    }\n\n    emit(RequestStockItemRemoved());\n  }\n\n  void clearScannedItems() {\n    _productOnPallets.clear();\n    _selectedProductsOnPallet.clear();\n    quantityPicked = 0;\n    emit(RequestStockScanItemLoaded());\n  }\n\n  // ==================== REQUEST OPERATIONS ====================\n\n  void addItemsForRequest() async {\n    try {\n      if (state is RequestStockAddRequestItemLoading) return;\n\n      emit(RequestStockAddRequestItemLoading());\n\n      // add selected items to productOnPalletsAdded\n      _selectedProductsOnPallet.forEach((packageCode, selectedIds) {\n        final itemsForKey = _productOnPallets[packageCode] ?? [];\n        final selectedItems =\n            itemsForKey.where((item) {\n              final itemId = item.id ?? '${item.serialNumber}-${item.palletId}';\n              return selectedIds.contains(itemId);\n            }).toList();\n        if (selectedItems.isNotEmpty) {\n          _productOnPalletsAdded[packageCode] = selectedItems;\n        }\n      });\n\n      // Clear selected items after adding\n      _selectedProductsOnPallet.clear();\n      quantityPicked = 0;\n      emit(RequestStockAddRequestItemLoaded());\n    } catch (e) {\n      emit(RequestStockAddRequestItemError(message: e.toString()));\n    }\n  }\n\n  void requestItems() async {\n    try {\n      if (state is RequestStockRequestItemsLoading) return;\n\n      if (_productOnPalletsAdded.isEmpty) {\n        emit(RequestStockRequestItemsError(message: 'No items to request'));\n        return;\n      }\n\n      emit(RequestStockRequestItemsLoading());\n\n      if (productOnPalletsAdded.isEmpty) {\n        emit(RequestStockRequestItemsError(message: 'No items selected'));\n        return;\n      }\n\n      final selectedItemsIds = <String>[];\n      _productOnPalletsAdded.forEach((packageCode, items) {\n        for (final item in items) {\n          final itemId = item.id ?? '${item.serialNumber}-${item.palletId}';\n          selectedItemsIds.add(itemId);\n        }\n      });\n\n      if (selectedItemsIds.isEmpty) {\n        emit(RequestStockRequestItemsError(message: 'No items selected'));\n        return;\n      }\n\n      print('Requesting van stock for items: ${selectedItemsIds.join(', ')}');\n\n      // Call API to request van stock - you'll need to implement this in your repository\n\n      init();\n      emit(RequestStockRequestItemsLoaded());\n    } catch (e) {\n      emit(RequestStockRequestItemsError(message: e.toString()));\n    }\n  }\n\n  List<ProductOnPallet> getSelectedProducts() {\n    final selectedProducts = <ProductOnPallet>[];\n\n    _selectedProductsOnPallet.forEach((packageCode, selectedIds) {\n      final itemsForKey = _productOnPallets[packageCode] ?? [];\n      for (final item in itemsForKey) {\n        final itemId = item.id ?? '${item.serialNumber}-${item.palletId}';\n        if (selectedIds.contains(itemId)) {\n          selectedProducts.add(item);\n        }\n      }\n    });\n\n    return selectedProducts;\n  }\n}\n"
        }
    ]
}